// Generated by CoffeeScript 1.6.3
(function() {
  var Ammo, Bullet, GameServer, Physijs, Player, THREE, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore');

  THREE = require('three');

  Ammo = require('./lib/ammo.js');

  Physijs = require('./lib/physi.js')(THREE, Ammo);

  Player = require('./player');

  Bullet = require('./bullet');

  module.exports = GameServer = (function() {
    GameServer.prototype.updatesPerSecond = 5;

    function GameServer(io) {
      var _this = this;
      this.io = io;
      this.updateGroups = __bind(this.updateGroups, this);
      this.broadcastBulletDelete = __bind(this.broadcastBulletDelete, this);
      this.broadcastBulletUpdate = __bind(this.broadcastBulletUpdate, this);
      this.removeBullets = __bind(this.removeBullets, this);
      this.updateBullet = __bind(this.updateBullet, this);
      this.addBullet = __bind(this.addBullet, this);
      this.broadcastPlayerDelete = __bind(this.broadcastPlayerDelete, this);
      this.broadcastPlayerUpdate = __bind(this.broadcastPlayerUpdate, this);
      this.removePlayer = __bind(this.removePlayer, this);
      this.updatePlayer = __bind(this.updatePlayer, this);
      this.addPlayer = __bind(this.addPlayer, this);
      this.addEntity = __bind(this.addEntity, this);
      this.update = __bind(this.update, this);
      this.initWorld = __bind(this.initWorld, this);
      this.entities = {};
      this.players = {};
      this.enemies = {};
      this.bullets = {};
      this.missiles = {};
      this.playerCount = 0;
      console.log('New Game Server!');
      this.io.sockets.on('connection', function(client) {
        console.log('new connection!');
        client.join('room');
        client.emit('client_id', client.id);
        client.on('disconnect', function() {
          _this.removeBullets(client.id);
          _this.broadcastPlayerDelete(client.id);
          return _this.removePlayer(client.id);
        });
        client.on('players_create', function(data) {
          return console.log('New Player');
        });
        client.on('players_read', function(data) {
          return client.emit('players_read', _.map(_this.players, function(v, k) {
            return v.getState();
          }));
        });
        client.on('ship_create', function(data) {
          var newPlayer;
          newPlayer = new Player(client, _this, data);
          _this.addPlayer(newPlayer);
          return client.emit('ship_create', newPlayer.getState());
        });
        client.on('ship_read', function(data) {
          return client.emit('ship_read', _this.players[data.id].getState());
        });
        client.on('ship_update', function(data) {
          _this.updatePlayer(data);
          return _this.broadcastPlayerUpdate(data);
        });
        client.on('ship_delete', function(data) {
          return _this.removePlayer(data.id);
        });
        client.on('bullet_create', function(data) {
          var bullet;
          bullet = new Bullet(client, _this, data);
          _this.addBullet(bullet);
          return client.emit('bullet_create', bullet.getState());
        });
        client.on('bullet_read', function(data) {
          return client.emit('bullet_read', _this.bullets[data.id].getState());
        });
        client.on('bullet_update', function(data) {
          _this.updateBullet(data);
          _this.broadcastBulletUpdate(data);
          return client.emit('bullet_update', _this.bullets[data.id].getState());
        });
        client.on('bullet_delete', function(data) {
          _this.removeBullet(data.id);
          return client.emit('bullet_delete', _this.bullets[data.id].getState());
        });
        client.on('bullets_read', function(data) {
          return client.emit('bullets_read', _.map(_this.bullets, function(v, k) {
            return v.getState();
          }));
        });
        client.on('enemy_create', function(data) {
          var newPlayer;
          newPlayer = new Enemy(client, _this, data);
          _this.addPlayer(newPlayer);
          return client.emit('enemy_create', newPlayer.getState());
        });
        client.on('enemy_read', function(data) {
          return client.emit('enemy_read', _.map(_this.players, function(v, k) {
            return v.getState();
          }));
        });
        client.on('enemy_update', function(data) {
          _this.updatePlayer(data);
          _this.broadcastPlayerUpdate(data);
          return client.emit('enemy_update', _.map(_this.players, function(v, k) {
            return v.getState();
          }));
        });
        return client.on('enemy_delete', function(data) {
          _this.removePlayer(data.id);
          return client.emit('enemy_delete', _.map(_this.players, function(v, k) {
            return v.getState();
          }));
        });
      });
      this.initWorld();
    }

    GameServer.prototype.initWorld = function() {
      this.scene = new Physijs.Scene;
      this.scene.setGravity(new THREE.Vector3(0, 0, 0));
      return setInterval(this.update, 1000);
    };

    GameServer.prototype.update = function() {
      this.scene.simulate();
      return this.updateGroups();
    };

    GameServer.prototype.addEntity = function(entity) {
      return this.entities[entity.id] = entity;
    };

    GameServer.prototype.addPlayer = function(player) {
      if (player != null) {
        this.scene.add(player.boundingBox);
        return this.players[player.id] = player;
      }
    };

    GameServer.prototype.updatePlayer = function(playerData) {
      this.players[playerData.id].pos = playerData.pos;
      return this.players[playerData.id].dir = playerData.dir;
    };

    GameServer.prototype.removePlayer = function(id) {
      return delete this.players[id];
    };

    GameServer.prototype.broadcastPlayerUpdate = function(player) {
      return this.io.sockets["in"]('room').emit('ship_update', this.players[player.id].getState());
    };

    GameServer.prototype.broadcastPlayerDelete = function(id) {
      return this.io.sockets["in"]('room').emit('players_delete', id);
    };

    GameServer.prototype.addBullet = function(bullet) {
      if (bullet != null) {
        this.scene.add(bullet.boundingBox);
        bullet.boundingBox.setLinearVelocity({
          z: -10,
          y: 0,
          x: 0
        });
        return this.bullets[bullet.id] = bullet;
      }
    };

    GameServer.prototype.updateBullet = function(bulletData) {
      return this.bullets[bulletData.id] = bullet.pos;
    };

    GameServer.prototype.removeBullets = function(id) {
      var k, v, _ref, _results;
      _ref = this.bullets;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        if (v.playerID === id) {
          _results.push(delete this.bullets[k]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    GameServer.prototype.broadcastBulletUpdate = function(data) {
      return this.io.sockets["in"]('room').emit('bullets_update', this.bullets[data.id]);
    };

    GameServer.prototype.broadcastBulletDelete = function(id) {
      return this.io.sockets["in"]('room').emit('bullets_delete', id);
    };

    GameServer.prototype.updateGroups = function() {
      var t;
      t = 300;
      this.io.sockets["in"]('room').emit('players_update', _.map(this.players, function(v, k) {
        return v.getState();
      }));
      return this.io.sockets["in"]('room').emit('bullets_update', _.map(this.bullets, function(v, k) {
        return v.getState();
      }));
    };

    return GameServer;

  })();

}).call(this);
