// Generated by CoffeeScript 1.6.3
(function() {
  var Ammo, Bullet, Entity, Physijs, Player, THREE,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Entity = require('./entity');

  Bullet = require('./bullet');

  THREE = require('three');

  Ammo = require('./lib/ammo.js');

  Physijs = require('./lib/physi.js')(THREE, Ammo);

  module.exports = Player = (function(_super) {
    __extends(Player, _super);

    function Player(connection, server, data) {
      this.connection = connection;
      this.server = server;
      this.getState = __bind(this.getState, this);
      Player.__super__.constructor.call(this, connection.id, "", "", data.pos, data.dir);
      this.health = 100;
      this.boundingBox = new Physijs.SphereMesh(new THREE.CubeGeometry(data.box.x, data.box.y, data.box.z), new THREE.MeshLambertMaterial({
        opacity: 0,
        transparent: true
      }));
      this.boundingBox.position = this.pos;
      this.boundingBox.addEventListener('collision', function(other_object, linear_velocity, angular_velocity) {
        if (other_object instanceof Bullet) {
          return this.connection.emit('player_damage', this.id);
        }
      });
    }

    Player.prototype.getState = function() {
      return {
        'id': this.id,
        'type': this.type,
        'pos': this.pos,
        'dir': this.dir,
        'box': this.minBox
      };
    };

    return Player;

  })(Entity);

}).call(this);
